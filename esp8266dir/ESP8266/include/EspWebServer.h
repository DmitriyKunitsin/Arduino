#ifndef ESPWEBSERVER_H
#define ESPWEBSERVER_H

#include <ESPAsyncWebServer.h>
/**
 * @brief Класс для асинхронного веб-сервера на ESP32.
 * Наследует от AsyncWebServer и добавляет кастомные обработчики.
 */
class EspWebServer : public AsyncWebServer
{
public:
    /**
     * @brief Конструктор по умолчанию, инициализирует сервер на порту 80.
     */
    EspWebServer() : AsyncWebServer(80)
    {
    }
    /**
     * @brief это основной обработчик, который вызывается после полного получения
     * и обработки тела (если onBody задан).
     * Он подходит для финальной логики (например, отправки ответа клиенту).
     * @param request Указатель на запрос.
     */
    void onRequest(AsyncWebServerRequest *request);
    /** @brief Обработчик для загрузки файлов (multipart/form-data). Вызывается асинхронно по мере получения файла.
     *        Если загрузка не нужна, передавайте nullptr в server.on().
     *        Файл приходит по чанкам (кусочкам), что позволяет обрабатывать большие файлы без загрузки всего в память.
     * @param request Указатель на объект запроса AsyncWebServerRequest (для доступа к заголовкам, параметрам и ответу).
     * @param filename Имя загружаемого файла (из multipart/form-data).
     * @param index Смещение в файле (позиция, с которой начинается текущий чанк; 0 для первого чанка).
     * @param data Указатель на байты текущего чанка данных файла.
     * @param len Длина текущего чанка в байтах.
     *@param final Флаг завершения: true, если это последний чанк файла (можно выполнить финальную обработку, например, сохранить файл).
     */
    void onUpload(AsyncWebServerRequest *request, const String &filename, size_t index, uint8_t *data, size_t len, bool final);
    /** @brief Обработчик тела запроса (request body), вызываемый асинхронно по мере получения данных.
     *        Тело приходит по чанкам (кусочкам), что позволяет обрабатывать большие данные без загрузки всего в память сразу.
     *        Рекомендуется накапливать тело в буфер и выполнять финальную обработку только на последнем чанке (когда index + len == total).
     *        После обработки очистите буфер, чтобы избежать утечек памяти и смешивания данных между запросами.
     * @param request Указатель на объект запроса AsyncWebServerRequest (для доступа к заголовкам, методу и ответу).
     * @param data Указатель на массив байтов текущего чанка тела (не null-terminated, используйте len для границ).
     * @param len Длина текущего чанка в байтах (может быть меньше полного тела).
     * @param index Смещение в общем теле (позиция, с которой начинается текущий чанк; 0 для первого чанка).
     * @param total Общий размер тела в байтах (известен заранее, если Content-Length задан).
     */
    void onBody(AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total);
};
#endif // ESPWEBSERVER_H
